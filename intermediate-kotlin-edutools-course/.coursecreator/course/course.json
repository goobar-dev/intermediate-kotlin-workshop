{
  "summary" : "This is an intermediate Kotlin course.\n- The course will be most beneficial for beginner-intermediate Kotlin learners.\n- The course covers intermediate Kotlin features.\n- It contains hands-on examples of Kotlin code implementation and exercises to practice new skills.\n- The course is based on the author's personal experience in Kotlin development.",
  "title" : "Intermediate Kotlin Workshop",
  "authors" : [
    "n8ebel"
  ],
  "programming_language" : "kotlin",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "welcome",
      "items" : [
        {
          "title" : "getting-started",
          "task_list" : [
            {
              "name" : "hello-world",
              "custom_name" : "Hello World",
              "files" : {
                "src/Main.kt" : {
                  "name" : "src/Main.kt",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "fun main() {\n    // click the Run button in the task description\n}\n"
                }
              },
              "description_text" : "<html>\n\n<h2>Welcome to this Intermediate Kotlin Workshop</h2>\n\n<p>In this first section, you'll learn how to use the EduTools plugin to work through examples and exercises in support\n    of your workshop.</p>\n\n<h3>Tracking Progress</h3>\n\n<p>The EduTools plugin will track your progress as you work through the examples.\n    Each example should have a \"call to action\" button that says something like <b>Run</b> or <b>Check</b>.\n</p>\n\n<p>Clicking this button will validate your code, and will update your progress once you've completed the task.</p>\n\n<p>Some tasks, like this one, may have no code to write. In these cases, simply click <b>Run</b> when you're ready to\n    proceed to the next task.</p>\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "name" : "code-tasks",
              "custom_name" : "Code Tasks",
              "files" : {
                "src/Task.kt" : {
                  "name" : "src/Task.kt",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "fun main() {\n  println(\"Hello World\")\n}"
                },
                "test/output.txt" : {
                  "name" : "test/output.txt",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "Hello World\n"
                }
              },
              "description_text" : "<html>\n\n<h2>Code Tasks</h2>\n\n<p>Each task/example will include a <em>main.kt</em> file.</p>\n\n<p>These files may include <em>TODO()</em> placeholders that hint at updates you should make to the code to make the\n    validations pass.</p>\n\n<p>In other cases, you may need to simply run the code to observe the output.</p>\n\n<p>In either case, you'll need to click the <b>Check</b> button to save your progress and proceed to the next example.</p>\n\n</html>",
              "description_format" : "HTML",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "output"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    ext.kotlin_version = '1.4.10'\n\n    repositories {\n        mavenCentral()\n        \n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        println \"#educational_plugin_checker_version 1\"\n        def separator = System.lineSeparator()\n        def lines = output.toString().split(\"(?<=${separator})|(?=${separator})\")\n        for (line in lines) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: 'application'\n    apply plugin: 'java'\n    apply plugin: 'kotlin'\n\n    sourceCompatibility = 1.8\n\n    repositories {\n        mavenCentral()\n        \n    }\n\n    dependencies {\n        implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n        testImplementation group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    compileKotlin.destinationDir = compileJava.destinationDir\n\n    compileKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n    compileTestKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n\n    sourceSets {\n        main {\n            kotlin.srcDir 'src'\n            java.srcDir 'src'\n        }\n        test {\n            kotlin.srcDir 'test'\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n    test {\n        outputs.upToDateWhen { false }\n        afterTest { TestDescriptor test, TestResult result ->\n            if (result.resultType == TestResult.ResultType.FAILURE) {\n                def message = result.exception?.message ?: \"Wrong answer\"\n                def lines = message.readLines()\n                println \"#educational_plugin FAILED + \" + lines[0]\n                lines.subList(1, lines.size()).forEach { line ->\n                    println \"#educational_plugin\" + line\n                }\n                // we need this to separate output of different tests\n                println()\n            }\n        }\n    }\n\n    if (project.hasProperty(\"educationalRun\") && \"true\".equalsIgnoreCase(project.getProperty(\"educationalRun\"))) {\n        def runOutput = new ByteArrayOutputStream()\n        tasks.run.setStandardOutput(runOutput)\n        tasks.run.doLast { printOutput(runOutput) }\n    }\n}\n\nproject(':util') {\n    dependencies {\n        implementation group: 'junit', name: 'junit', version: '4.12'\n    }\n}\n\nconfigure(subprojects.findAll { it.name != 'util' }) {\n    dependencies {\n        implementation project(':util').sourceSets.main.output\n        testImplementation project(':util').sourceSets.test.output\n    }\n}\n"
    }
  ],
  "version" : 11
}